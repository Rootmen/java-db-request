<?xml version="1.0" encoding="UTF-8"?>
<Definitions>
    <QuerySet ID="RUN_AUTOMATICALLY_CHOOSING">
        <CONNECTION REFID="PG_CONNECT"/>
        <QUERY>
            <TextParam ID="VAR_ID" name="VAR_ID" type="bigint"/>
            <SQL wrapperClass="com.rootmen.servlets.rpc.wrapper.WrapperEventRunner">
                <![CDATA[
                SELECT;
				]]>
            </SQL>
        </QUERY>
    </QuerySet>
    <QuerySet ID="CLEAR_AUTOMATICALLY_CHOOSING">
        <CONNECTION REFID="PG_CONNECT"/>
        <QUERY>
            <TextParam ID="VAR_ID" name="VAR_ID" type="bigint"/>
            <SQL>
                <![CDATA[
                DELETE FROM DNEIM.INFRASTRUCTURAL_EVENT_INFO
                WHERE VAR_ID = $VAR_ID$ AND SOURCE_TYPE = 3
				]]>
            </SQL>
        </QUERY>
    </QuerySet>
    <QuerySet ID="ADD_AUTOMATICALLY_CHOOSING">
        <CONNECTION REFID="PG_CONNECT"/>
        <QUERY>
            <TextParam ID="JSON" name="JSON" type="string"/>
            <SQL>
                <![CDATA[
                WITH DATA AS (SELECT VAR_ID,
                                     EVENT_TYPE,
                                     START_TIME,
                                     END_TIME,
                                     NULLIF(NAME, '')                                                   AS NAME,
                                     NULLIF(DESCRIPTION, '')                                            AS DESCRIPTION,
                                     EVENT_INFO                                                         AS EVENT_INFO,
                                     NEXTVAL('DNEIM.INFRASTRUCTURAL_EVENT_INFO_EVENT_ID_SEQ'::REGCLASS) AS EVENT_ID
                              FROM JSON_TO_RECORDSET($JSON$::JSON) AS DATA(
                                                VAR_ID BIGINT,
                                                EVENT_TYPE INT,
                                                START_TIME TEXT,
                                                END_TIME TEXT,
                                                NAME TEXT,
                                                DESCRIPTION TEXT,
                                                EVENT_INFO JSONB
                                  )),
                     NEW_ST_ID AS (
                         SELECT distinct ST_ID::INT, -NEXTVAL('DNEIM.STAN_ID_SEQUENCE'::REGCLASS) AS NEW_STAN_ID
                         FROM ((SELECT (EL ->> 'event_json')::JSONB ->> 'start_stan_id' AS ST_ID
                                FROM DATA,
                                     JSONB_ARRAY_ELEMENTS(DATA.EVENT_INFO) AS EL
                                WHERE ((EL ->> 'event_json')::JSONB ->> 'start_stan_id')::INT < 0)
                               UNION
                               (SELECT (EL ->> 'event_json')::JSONB ->> 'end_stan_id'
                                FROM DATA,
                                     JSONB_ARRAY_ELEMENTS(DATA.EVENT_INFO) AS EL
                                WHERE ((EL ->> 'event_json')::JSONB ->> 'end_stan_id')::INT < 0)) AS DATA),
                     NEW_FRAG_ID AS (
                         SELECT DISTINCT ID_FRAG AS ID_FRAG, -NEXTVAL('DNEIM.FRAG_ID_BIGINT_NUMBER'::REGCLASS) AS NEW_FRAG_ID
                         FROM DATA,  JSONB_TO_RECORDSET(DATA.EVENT_INFO) AS EVENT_JSON_DATA (
                                                                                              ID_FRAG BIGINT,
                                                                                              END_STAN_ID INT,
                                                                                              START_STAN_ID INT,
                                                                                              EVENT_JSON JSONB
                                          )
                                ),
                     INSERT_EVENT_INFO AS (
                         INSERT INTO DNEIM.INFRASTRUCTURAL_EVENT_INFO (EVENT_ID,
                                                                       VAR_ID,
                                                                       EVENT_TYPE,
                                                                       EVENT_NAME,
                                                                       EVENT_DESCRIPTION,
                                                                       EVENT_INVEST_SUM,
                                                                       EVENT_START,
                                                                       EVENT_END,
                                                                       EVENT_TAGS,
                                                                       SPIUI_ID,
                                                                       SOURCE_TYPE)
                             SELECT EVENT_ID,
                                    VAR_ID,
                                    EVENT_TYPE,
                                    NAME,
                                    DESCRIPTION,
                                    0,
                                    DATE(START_TIME),
                                    DATE(END_TIME),
                                    NULL,
                                    0::TEXT,
                                    3
                             FROM DATA
                             RETURNING *
                     ),
                     INSERT_EVENT_INFO_SPAN AS (
                         INSERT
                             INTO DNEIM.INFRASTRUCTURAL_EVENT_INFO_SPAN (EVENT_ID, NUMBER, START_STAN_ID, END_STAN_ID, ID_FRAG, EVENT_JSON)
                                 SELECT EVENT_ID,
                                        ROW_NUMBER() OVER (PARTITION BY EVENT_ID),
                                        CASE
                                            WHEN START_STAN_ID < 0
                                                THEN (SELECT NEW_ST_ID.NEW_STAN_ID FROM NEW_ST_ID WHERE NEW_ST_ID.ST_ID = START_STAN_ID)
                                            ELSE START_STAN_ID END AS START_STAN_ID,
                                        CASE
                                            WHEN END_STAN_ID < 0
                                                THEN (SELECT NEW_ST_ID.NEW_STAN_ID FROM NEW_ST_ID WHERE NEW_ST_ID.ST_ID = END_STAN_ID)
                                            ELSE END_STAN_ID END   AS END_STAN_ID,
                                        (CASE
                                             WHEN ID_FRAG < 0 THEN (SELECT NEW_FRAG_ID.NEW_FRAG_ID
                                                                    FROM NEW_FRAG_ID
                                                                    WHERE NEW_FRAG_ID.ID_FRAG = EVENT_JSON_DATA.ID_FRAG)
                                             ELSE ID_FRAG END)     AS ID_FRAG,
                                        CASE
                                            WHEN EVENT_TYPE = 14 and (EVENT_JSON ->> 'num_line')::INT = 0 then
                                                        EVENT_JSON || JSONB_BUILD_OBJECT('new_id', (SELECT NEW_ST_ID.NEW_STAN_ID
                                                                                                    FROM NEW_ST_ID
                                                                                                    WHERE NEW_ST_ID.ST_ID = (EVENT_JSON ->> 'end_stan_id')::INT))
                                                    || JSONB_BUILD_OBJECT('end_stan_id', (SELECT NEW_ST_ID.NEW_STAN_ID
                                                                                          FROM NEW_ST_ID
                                                                                          WHERE NEW_ST_ID.ST_ID = (EVENT_JSON ->> 'end_stan_id')::INT))
                                            WHEN EVENT_TYPE = 14 and (EVENT_JSON ->> 'num_line')::INT = 1 then
                                                        EVENT_JSON || JSONB_BUILD_OBJECT('new_id', (SELECT NEW_ST_ID.NEW_STAN_ID
                                                                                                    FROM NEW_ST_ID
                                                                                                    WHERE NEW_ST_ID.ST_ID = (EVENT_JSON ->> 'start_stan_id')::INT))
                                                    || JSONB_BUILD_OBJECT('start_stan_id', (SELECT NEW_ST_ID.NEW_STAN_ID
                                                                                            FROM NEW_ST_ID
                                                                                            WHERE NEW_ST_ID.ST_ID = (EVENT_JSON ->> 'start_stan_id')::INT))
                                            else EVENT_JSON end || CASE
                                                                       WHEN (EVENT_JSON ->> 'id_frag')::BIGINT < 0 THEN
                                                                           JSONB_BUILD_OBJECT('id_frag', (SELECT NEW_FRAG_ID.NEW_FRAG_ID
                                                                                                          FROM NEW_FRAG_ID
                                                                                                          WHERE NEW_FRAG_ID.id_frag = EVENT_JSON_DATA.ID_FRAG))
                                                                       ELSE
                                                                           '{}'::jsonb end
                                                                   as EVENT_JSON
                                 FROM DATA,
                                      JSONB_TO_RECORDSET(DATA.EVENT_INFO) AS EVENT_JSON_DATA (
                                                                                              ID_FRAG BIGINT,
                                                                                              END_STAN_ID INT,
                                                                                              START_STAN_ID INT,
                                                                                              EVENT_JSON JSONB
                                          )
                     )
                SELECT TRUE;
				]]>
            </SQL>
        </QUERY>
    </QuerySet>
</Definitions>
